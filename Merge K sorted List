/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        
        if(lists.size()==0){
            return {};
        }
        if(lists.size()==1){
            return lists[0];
        }
        int k= lists.size()-1;
        int last=k;
        while(last !=0){
            int i = 0, j = last; 
  
         
        while (i < j) { 
            
            lists[i] = SortedMerge(lists[i], lists[j]); 
  
           
            i++, j--; 
  
            
            if (i >= j) 
                last = j; 
        } 
    } 
  
    return lists[0]; 
    }
    
    ListNode* SortedMerge(ListNode* a, ListNode* b) 
{ 
    ListNode* result = NULL; 
  
    /* Base cases */
    if (a == NULL) 
        return (b); 
    else if (b == NULL) 
        return (a); 
  
    /* Pick either a or b, and recur */
    if (a->val <= b->val) { 
        result = a; 
        result->next = SortedMerge(a->next, b); 
    } 
    else { 
        result = b; 
        result->next = SortedMerge(a, b->next); 
    } 
  
    return result; 
} 
};
