/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        
        // if(head==nullptr || head->next==nullptr){
        //     return head;
        // }
        ListNode* current = head;  
        ListNode* temp = head;  
        ListNode* next = NULL;  
        ListNode* prev = NULL;  
        int count = 0;
        int c=0;
        while(temp!=nullptr && c<=k){
            
            c++;
            temp=temp->next;
        }
        
        if(c>=k){
        while(current!=nullptr && count < k){
            next=current->next;
            current->next=prev;
            prev=current;
            current=next;
            count++;
            
        }
        if(next!=nullptr){
            head->next=reverseKGroup(next,k);
        }
        }
        else{
            return head;
        }
        
        
        return prev;
        
    }
};
