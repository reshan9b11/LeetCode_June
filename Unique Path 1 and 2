class Solution {
public:
    int uniquePaths(int m, int n) {
       int count[m][n]; 
  
    // Count of paths to reach any cell in first column is 1 
    for (int i = 0; i < m; i++) 
        count[i][0] = 1; 
  
    // Count of paths to reach any cell in first row is 1 
    for (int j = 0; j < n; j++) 
        count[0][j] = 1; 
  
    // Calculate count of paths for other cells in 
    // bottom-up manner using the recursive solution 
    for (int i = 1; i < m; i++) { 
        for (int j = 1; j < n; j++) 
  
            // By uncommenting the last part the code calculatest he total 
            // possible paths if the diagonal Movements are allowed 
            count[i][j] = count[i - 1][j] + count[i][j - 1]; //+ count[i-1][j-1]; 
    } 
    return count[m - 1][n - 1]; 
        
        
    }
};


///////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        
        
        if(obstacleGrid[0][0]==1){
            return 0;
        }
        // Count of paths to reach any cell in first column is 1 
        obstacleGrid[0][0]=1;
    for (int i = 1; i < obstacleGrid.size(); i++) 
        obstacleGrid[i][0] = (obstacleGrid[i][0] == 0 && obstacleGrid[i - 1][0] == 1) ? 1 : 0;; 
  
    // Count of paths to reach any cell in first row is 1 
    for (int j = 1; j < obstacleGrid[0].size(); j++) 
        obstacleGrid[0][j] = (obstacleGrid[0][j] == 0 && obstacleGrid[0][j - 1] == 1) ? 1 : 0; 
  
    // Calculate count of paths for other cells in 
    // bottom-up manner using the recursive solution 
    for (int i = 1; i < obstacleGrid.size(); i++) { 
        for (int j = 1; j < obstacleGrid[0].size(); j++) 
  
            // By uncommenting the last part the code calculatest he total 
            // possible paths if the diagonal Movements are allowed 
            if(obstacleGrid[i][j]==0)
            obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1]; //+ count[i-1][j-1]; 
        
        else{
            obstacleGrid[i][j]=0;
        }
    } 
    return obstacleGrid[obstacleGrid.size() - 1][obstacleGrid[0].size() - 1]; 
        
    }
};
