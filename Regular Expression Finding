/*Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.*/


class Solution {
public:
    bool isMatch(string s, string p) {
//         if(p.length()==0 ) 
//         {
//             return (s.length()==0);
//         }
//         bool dp[s.length()+1][p.length()+1];
//         memset(dp,false,sizeof(dp));
//         dp[0][0]=true;
//         for(int i=1;i<=p.length();i++){
//             if(p.at(i-1)=='*'){
//                 dp[0][i]=dp[0][i-1];
//             }
//         }
        
//         for(int i=1;i<=s.length();i++){
//             for(int j=1;j<=p.length();j++){
//                 if(p.at(j-1)=='*'){
//                     dp[i][j]= dp[i][j-1] || dp[i-1][j];
                    
//                 }
                
//                 else if(p.at(j-1)=='.' || p.at(j-1)==s.at(i-1)){
//                     dp[i][j]= dp[i-1][j-1];
//                 }
//                 else{
//                     dp[i][j]=false;
//                 }
//             }
//         }
//         return dp[s.length()][p.length()];
        
        bool dp[s.length() + 1][p.length() + 1];
        memset(dp,false,sizeof(dp));
        dp[s.length()][p.length()] = true;

        for (int i = s.length(); i >= 0; i--){
            for (int j = p.length() - 1; j >= 0; j--){
                bool first_match = (i < s.length() &&
                                       (p.at(j) == s.at(i) ||
                                        p.at(j) == '.'));
                if (j + 1 < p.length() && p.at(j+1) == '*'){
                    dp[i][j] = dp[i][j+2] || first_match && dp[i+1][j];
                } else {
                    dp[i][j] = first_match && dp[i+1][j+1];
                }
            }
        }
        return dp[0][0];
        
        
    }
};
