
class Solution {
public:
    void floodfill(vector<vector<char>>& board, int x, int y, char prev, char newv,int row,int col){
       if (x < 0 || x >= row || y < 0 || y >= col) 
        return; 
    if (board[x][y] != prev) 
        return; 
     board[x][y]=newv;   
        
        // recursive call for north, east, south and west 
    floodfill(board, x+1, y, prev, newv,row,col); 
    floodfill(board, x-1, y, prev, newv,row,col); 
    floodfill(board, x, y+1, prev, newv,row,col); 
    floodfill(board, x, y-1, prev, newv,row,col);
        
    }
    void solve(vector<vector<char>>& board) {
        if(board.size()==0){
            return;
        }
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(board[i][j]=='O'){
                    board[i][j]='r';
                }
            }
        }
        //Flood Fill Algorithm
       int row=board.size();
        int col=board[0].size();
        //call floodfill for left
        for(int i=0;i<row;i++){
            if(board[i][0]=='r'){
                floodfill(board,i,0,'r','O',row,col);
            }
        }
        //call floodfill for right
        for(int i=0;i<row;i++){
            if(board[i][col-1]=='r'){
                floodfill(board,i,col-1,'r','O',row,col);
            }
        }
        //call floodfill for top
        for(int i=0;i<col;i++){
            if(board[0][i]=='r'){
                floodfill(board,0,i,'r','O',row,col);
            }
        }
        //call floodfill for left
        for(int i=0;i<col;i++){
            if(board[row-1][i]=='r'){
                floodfill(board,row-1,i,'r','O',row,col);
            }
        }
        
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(board[i][j]=='r'){
                    board[i][j]='X';
                }
            }
        }
        
        
    }
};
