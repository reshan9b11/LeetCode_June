class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if(intervals.size()==0){
            return {};
        }
        sort(intervals.begin(),intervals.end());
        vector<vector<int>> result;
        int k=1;
        result.push_back(intervals[0]);
        for(int i=1;i<intervals.size();i++){
            if(result[k-1][1]>=intervals[i][0]){
                
                if(result[k-1][1] > intervals[i][1]){
                    //result[k-1][1]=intervals[i][1];
                    continue;
                }
               else{
                   result[k-1][1]=intervals[i][1];
               } 
                
            }
            else if(result[k-1][1]<intervals[i][0])
            {
                result.push_back(intervals[i]);
                k++;
            }
            
        }
        return result;
        
    }
};



// INSERT NEW INTERVAL
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        vector<vector<int>> aresult;
        vector<vector<int>> result;
        if(intervals.size()==0){
             result.push_back(newInterval);
            return result;
        }
        
        //(new interval to be inserted at corners) 
        
        if (newInterval[1] < intervals[0][0] || 
            newInterval[0] > intervals[ intervals.size()- 1][1]) 
    { 
        if (newInterval[1] < intervals[0][0]) 
            aresult.push_back(newInterval); 
  
        for (int i = 0; i < intervals.size(); i++) 
            aresult.push_back(intervals[i]); 
  
        if (newInterval[0] > intervals[intervals.size() - 1][1]) 
            aresult.push_back(newInterval); 
            
            return aresult;
   
    } 
  
    // (New interval covers all existing) 
   if (newInterval[0] <= intervals[0][0] && 
        newInterval[1] >= intervals[intervals.size() - 1][1]) 
    { 
        aresult.push_back(newInterval); 
       return aresult;
       
    } 
     //Else insert the new interval to the original interval
        intervals.push_back(newInterval);
        //Apply the Merge Interval Logic
         sort(intervals.begin(),intervals.end());
      //  vector<vector<int>> result;
        int k=1;
        result.push_back(intervals[0]);
        for(int i=1;i<intervals.size();i++){
            if(result[k-1][1]>=intervals[i][0]){
                
                if(result[k-1][1] > intervals[i][1]){
                    //result[k-1][1]=intervals[i][1];
                    continue;
                }
               else{
                   result[k-1][1]=intervals[i][1];
               } 
                
            }
            else if(result[k-1][1]<intervals[i][0])
            {
                result.push_back(intervals[i]);
                k++;
            }
            
        }
        return result;
        
    }
};

