class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        
        int min=0,i,j,median;
        int m=nums1.size(),n=nums2.size();
        if(m>n){
            nums1.swap(nums2);
            int t=m; m=n; n=t;
        }
        int max=m;
        //int large=(nums1.size()<=nums2.size())? nums1.size() : nums2.size();
        //int small=max;
        while(min<=max){
            i= (min + max)/2;
            j= (nums1.size() + nums2.size() +1)/2 -i;
            if(j<0){
                max=i-1;
                continue;
            }
            
            if(i<m && j>0 && nums2[j-1]>nums1[i] ){
                min=i+1;
            }
            
            else if(i>0 && j<n && nums2[j]<nums1[i-1] ){
                max=i-1;
            }
            
            else
            {
             if(i==0){
                 median= nums2[j-1];
             }   
                else if(j==0){
                    median= nums1[i-1];
                }
                else{
                    median =((nums1[i-1] >= nums2[j-1]) ? nums1[i-1] : nums2[j-1]);
                    break;
                }
            }
            
        }
        if( (n + m) % 2 == 1 ){
            return (double)median;
        }
        
    if( i== m){
        return  (median + nums2[j])/2.0; 
    }
        if( j== n){
        return  (median + nums1[i])/2.0; 
    }
        return (median + ((nums1[i] <= nums2[j]) ? nums1[i] : nums2[j]))/2.0;
        
    }
};
