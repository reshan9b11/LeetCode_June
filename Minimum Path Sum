class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        //1st col
        for(int i=1;i<grid.size();i++){
            grid[i][0]+=grid[i-1][0];
        }
        //1st row
        for(int i=1;i<grid[0].size();i++){
            grid[0][i]+=grid[0][i-1];
        }
        
        for(int i=1;i<grid.size();i++){
            
            for(int j=1;j<grid[0].size();j++){
                grid[i][j]+=min(grid[i-1][j],grid[i][j-1]); // add grid[i-1][j-1] in min for diagonal 
            }
        }
        return grid[grid.size()-1][grid[0].size()-1];
        
        
    }
};

/*class Solution {
public:
//     int min(int x,int y,int z){
//         if(x<y){
//             return (x<z) ? x:z;
//         }
//         else{
//             return (y<z) ? y:z;
//         }
        
//     }
    int min(int x,int y){
        return (x<y) ? x:y;
    }
    
    int recur(vector<vector<int>>& grid ,int m ,int n){
         if (n < 0 || m < 0) 
            return INT_MAX; 
       else if(m==0 && n==0){
            return grid[m][n];
        }
        else{
          return grid[m][n] + min(recur(grid,m-1,n),recur(grid,m,n-1) ); 
        }
        
       
        
    }
    
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.size()==0){
            return 0;
          
        }
         int result= recur(grid,grid.size()-1,grid[0].size()-1);
        return result;
    }
};

*/
